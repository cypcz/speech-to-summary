import Head from "next/head";
import { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import { useQuery } from "react-query";
import * as yup from "yup";
import { getTasks, GET_TASKS } from "../api/requests";
import { Form } from "../components/form/Form";
import { Input } from "../components/form/Input";
import { useAuthContext } from "../utils/AuthContext";

const LoginSchema = yup.object().shape({
  email: yup.string().email().required(),
  password: yup.string().min(6).required(),
});

export const App = () => {
  const { user, login, logout } = useAuthContext();
  const [loadingProgress, setLoadingProgress] = useState<number | null>(null);

  const { data: tasks } = useQuery([GET_TASKS, user?.id], getTasks);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];

    const formData = new FormData();
    formData.append("file", file);

    const xhr = new XMLHttpRequest();

    xhr.upload.addEventListener("progress", (ev) => {
      setLoadingProgress(ev.loaded / ev.total);
    });

    xhr.onreadystatechange = () => {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        console.log(JSON.parse(xhr.response));
      }
    };

    xhr.open("POST", `${process.env.NEXT_PUBLIC_API_URL}/summary/upload`);
    xhr.send(formData);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {user ? (
          <button onClick={logout}>logout</button>
        ) : (
          <Form
            initialValues={{
              email: "",
              password: "",
            }}
            validationSchema={LoginSchema}
            onSubmit={login}
          >
            <Input name="email" label="Email" />
            <Input name="password" label="Password" type="password" />
            <button type="submit">login</button>
            <button type="button">
              <a href="http://localhost:4000/auth/google">google login</a>
            </button>
            <button type="button">
              <a href="http://localhost:4000/auth/facebook">facebook login</a>
            </button>
          </Form>
        )}
        <div {...getRootProps()}>
          <input {...getInputProps()} />
          {isDragActive ? (
            <p>Drop the files here ...</p>
          ) : (
            <p>Drag drop some files here, or click to select files</p>
          )}
        </div>

        {loadingProgress && (
          <div>Progress: {(loadingProgress * 100).toFixed(0)}%</div>
        )}

        {tasks?.map((task) => (
          <div
            key={task.id}
            style={{ marginBottom: "1rem", borderBottom: "2px solid black" }}
          >
            <p>Transcript: {task.transcript}</p>
            {task.summaries.map((s, i) => (
              <p key={i}>{`Summary ${i}: ${s}`}</p>
            ))}
          </div>
        ))}
      </main>

      <footer>footer</footer>
    </>
  );
};
